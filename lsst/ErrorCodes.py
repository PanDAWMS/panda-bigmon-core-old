'''
Created on Jun 29, 2009

@author: Torre Wenaus
'''

class ErrorCodes:
    
    errorFields = ('pilot','exe','sup','ddm','brokerage','jobDispatcher','taskBuffer')
    errorCodes = {}
    errorStages = {}

    def __init__(self):
        for f in self.errorFields:
            self.errorCodes['%sErrorCode'%f] = {}
            self.errorStages['%sErrorCode'%f] = {}
    
        ## Panda errors can be found at https://twiki.cern.ch/twiki/bin/view/Atlas/PandaErrorCodes
    
        self.errorCodes['ddmErrorCode'][100] = 'DQ2 server error'
        self.errorStages['ddmErrorCode'][100] = 'ddm-start'
        self.errorCodes['ddmErrorCode'][200] = 'Could not add output files to dataset'
        self.errorStages['ddmErrorCode'][200] = 'ddm-end'
        self.errorCodes['ddmErrorCode'][201] = 'Panda server failed to register subscription in DQ2'
        self.errorStages['ddmErrorCode'][201] = 'ddm-end'
        self.errorCodes['jobDispatcherErrorCode'][100] = 'Lost heartbeat'
        self.errorStages['jobDispatcherErrorCode'][100] = 'time-during'
        self.errorCodes['jobDispatcherErrorCode'][101] = 'Job recovery failed for three days'
        self.errorStages['jobDispatcherErrorCode'][101] = 'time-during'
        self.errorCodes['jobDispatcherErrorCode'][102] = 'No reply to sent job'
        self.errorStages['jobDispatcherErrorCode'][102] = 'time-during'
        self.errorCodes['taskBufferErrorCode'][100] = 'Job expired and killed three days after submission (or killed by user)'
        self.errorStages['taskBufferErrorCode'][100] = 'user-during'
        self.errorCodes['taskBufferErrorCode'][101] = 'transfer timeout (2weeks)'
        self.errorStages['taskBufferErrorCode'][101] = 'time-end'
        self.errorCodes['taskBufferErrorCode'][102] = 'Expired three days after submission'
        self.errorStages['taskBufferErrorCode'][102] = 'time-end'
        self.errorCodes['taskBufferErrorCode'][103] = 'Aborted by executor interface'
        self.errorStages['taskBufferErrorCode'][103] = 'panda-during'
        self.errorCodes['taskBufferErrorCode'][104] = 'Waiting job timed out'
        self.errorStages['taskBufferErrorCode'][104] = 'panda-during'
        self.errorCodes['taskBufferErrorCode'][105] = 'Reassigned by rebrokeage'
        self.errorStages['taskBufferErrorCode'][105] = 'panda-during'
        self.errorCodes['taskBufferErrorCode'][106] = 'Reassigned by server-side retry'
        self.errorStages['taskBufferErrorCode'][106] = 'panda-during'
        self.errorCodes['taskBufferErrorCode'][107] = 'Retried by pilot'
        self.errorStages['taskBufferErrorCode'][107] = 'panda-during'
        self.errorCodes['taskBufferErrorCode'][110] = 'Input file lost in SE'
        self.errorStages['taskBufferErrorCode'][110] = 'panda-during'
        self.errorCodes['pilotErrorCode'][1008] = 'General pilot error, consult batch log'
        self.errorStages['pilotErrorCode'][1008] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1097] = 'Get function can not be called for staging input file'
        self.errorStages['pilotErrorCode'][1097] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1098] = 'No space left on local disk'
        self.errorStages['pilotErrorCode'][1098] = 'athena-during'
        self.errorCodes['pilotErrorCode'][1099] = 'Get error: Staging input file failed'
        self.errorStages['pilotErrorCode'][1099] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1100] = 'Get error: Replica not found'
        self.errorStages['pilotErrorCode'][1100] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1101] = 'LRC registration error: Connection refused'
        self.errorStages['pilotErrorCode'][1101] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1102] = 'Expected output file does not exist'
        self.errorStages['pilotErrorCode'][1102] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1103] = 'No such file or directory'
        self.errorStages['pilotErrorCode'][1103] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1104] = 'User work directory too large'
        self.errorStages['pilotErrorCode'][1104] = 'user-during'
        self.errorCodes['pilotErrorCode'][1105] = 'Put error: Failed to add file size and checksum to LFC'
        self.errorStages['pilotErrorCode'][1105] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1106] = 'Payload stdout file too big'
        self.errorStages['pilotErrorCode'][1106] = 'user-during'
        self.errorCodes['pilotErrorCode'][1107] = 'Get error: Missing DBRelease file'
        self.errorStages['pilotErrorCode'][1107] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1108] = 'Put error: LCG registration failed'
        self.errorStages['pilotErrorCode'][1108] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1109] = 'Required CMTCONFIG incompatible with WN'
        self.errorStages['pilotErrorCode'][1109] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1110] = 'Failed during setup'
        self.errorStages['pilotErrorCode'][1110] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1111] = 'Exception caught by runJob'
        self.errorStages['pilotErrorCode'][1111] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1112] = 'Exception caught by pilot'
        self.errorStages['pilotErrorCode'][1112] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1113] = 'Get error: Failed to import LFC python module'
        self.errorStages['pilotErrorCode'][1113] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1114] = 'Put error: Failed to import LFC python module'
        self.errorStages['pilotErrorCode'][1114] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1115] = 'NFS SQLite locking problems'
        self.errorStages['pilotErrorCode'][1115] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1116] = 'Pilot could not download queuedata'
        self.errorStages['pilotErrorCode'][1116] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1117] = 'Pilot found non-valid queuedata'
        self.errorStages['pilotErrorCode'][1117] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1118] = 'Pilot could not curl space report'
        self.errorStages['pilotErrorCode'][1118] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1119] = 'Pilot aborted due to DDM space shortage'
        self.errorStages['pilotErrorCode'][1119] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1120] = 'Space token descriptor does not match destination path'
        self.errorStages['pilotErrorCode'][1120] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1121] = 'Can not read the xml file for registering output files to dispatcher'
        self.errorStages['pilotErrorCode'][1121] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1122] = 'Bad replica entry returned by lfc_getreplicas(): SFN not set in LFC for this guid'
        self.errorStages['pilotErrorCode'][1122] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1123] = 'Missing guid in output file list'
        self.errorStages['pilotErrorCode'][1123] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1124] = 'Output file too large'
        self.errorStages['pilotErrorCode'][1124] = 'athena-during'
        self.errorCodes['pilotErrorCode'][1130] = 'Get error: Failed to get POOL file catalog'
        self.errorStages['pilotErrorCode'][1130] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1131] = 'Put function can not be called for staging out'
        self.errorStages['pilotErrorCode'][1131] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1132] = 'LRC registration error (consult log file)'
        self.errorStages['pilotErrorCode'][1132] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1133] = 'Put error: Fetching default storage URL failed'
        self.errorStages['pilotErrorCode'][1133] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1134] = 'Put error: Error in mkdir on localSE, not allowed or no available space'
        self.errorStages['pilotErrorCode'][1134] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1135] = 'Could not get file size in job workdir'
        self.errorStages['pilotErrorCode'][1135] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1136] = 'Put error: Error running md5sum to the file in job workdir'
        self.errorStages['pilotErrorCode'][1136] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1137] = 'Put error: Error in copying the file from job workdir to localSE'
        self.errorStages['pilotErrorCode'][1137] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1138] = 'Put error: could not get the file size on localSE'
        self.errorStages['pilotErrorCode'][1138] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1139] = 'Put error: Problem with copying from job workdir to local SE: size mismatch'
        self.errorStages['pilotErrorCode'][1139] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1140] = 'Put error: Error running md5sum to the file on localSE'
        self.errorStages['pilotErrorCode'][1140] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1141] = 'Put error: Problem with copying from job workdir to local SE: md5sum mismatch'
        self.errorStages['pilotErrorCode'][1141] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1142] = 'Put error: failed to register the file on local SE'
        self.errorStages['pilotErrorCode'][1142] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1143] = 'Failed to chmod trf'
        self.errorStages['pilotErrorCode'][1143] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1144] = 'Job killed by panda server'
        self.errorStages['pilotErrorCode'][1144] = 'user-during'
        self.errorCodes['pilotErrorCode'][1145] = 'Get error: md5sum mismatch on input file'
        self.errorStages['pilotErrorCode'][1145] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1146] = 'Trf installation dir does not exist and could not be installed'
        self.errorStages['pilotErrorCode'][1146] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1147] = 'Put error: dccp returned readOnly'
        self.errorStages['pilotErrorCode'][1147] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1148] = 'Put error: Failed to remove readOnly file in dCache'
        self.errorStages['pilotErrorCode'][1148] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1149] = 'wget command failed to download trf'
        self.errorStages['pilotErrorCode'][1149] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1150] = 'Looping job killed by pilot'
        self.errorStages['pilotErrorCode'][1150] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1151] = 'Get error: Input file staging timed out'
        self.errorStages['pilotErrorCode'][1151] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1152] = 'Put error: File copy timed out'
        self.errorStages['pilotErrorCode'][1152] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1153] = 'Lost job was not finished'
        self.errorStages['pilotErrorCode'][1153] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1154] = 'Failed to register log file'
        self.errorStages['pilotErrorCode'][1154] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1155] = 'Failed to move output files for lost job'
        self.errorStages['pilotErrorCode'][1155] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1156] = 'Pilot could not recover job'
        self.errorStages['pilotErrorCode'][1156] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1157] = 'Could not create log file'
        self.errorStages['pilotErrorCode'][1157] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1158] = 'Reached maximum number of recovery attempts'
        self.errorStages['pilotErrorCode'][1158] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1159] = 'Job recovery could not read PoolFileCatalog.xml file (guids lost)'
        self.errorStages['pilotErrorCode'][1159] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1160] = 'LRC registration error: file name string limit exceeded 250'
        self.errorStages['pilotErrorCode'][1160] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1161] = 'Job recovery could not generate xml for remaining output files'
        self.errorStages['pilotErrorCode'][1161] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1162] = 'LRC registration error: Non-unique LFN'
        self.errorStages['pilotErrorCode'][1162] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1163] = 'Grid proxy not valid'
        self.errorStages['pilotErrorCode'][1163] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1164] = 'Get error: Local input file missing'
        self.errorStages['pilotErrorCode'][1164] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1165] = 'Put error: Local output file missing'
        self.errorStages['pilotErrorCode'][1165] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1166] = 'Put error: File copy broken by SIGPIPE'
        self.errorStages['pilotErrorCode'][1166] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1167] = 'Get error: Input file missing in PoolFileCatalog.xml'
        self.errorStages['pilotErrorCode'][1167] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1168] = 'Get error: Total file size too large'
        self.errorStages['pilotErrorCode'][1168] = 'user-start'
        self.errorCodes['pilotErrorCode'][1169] = 'Put error: LFC registration failed'
        self.errorStages['pilotErrorCode'][1169] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1170] = 'Error running adler32 on the file in job workdir'
        self.errorStages['pilotErrorCode'][1170] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1171] = 'Get error: adler32 mismatch on input file'
        self.errorStages['pilotErrorCode'][1171] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1172] = 'Put error: Problem with copying from job workdir to local SE: adler32 mismatch'
        self.errorStages['pilotErrorCode'][1172] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1173] = 'PandaMover staging error: File is not cached'
        self.errorStages['pilotErrorCode'][1173] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1174] = 'PandaMover transfer failure'
        self.errorStages['pilotErrorCode'][1174] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1175] = 'Get error: Problem with copying from local SE to job workdir: size mismatch'
        self.errorStages['pilotErrorCode'][1175] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1176] = 'Pilot has no child processes (job wrapper has either crashed or did not send final status)'
        self.errorStages['pilotErrorCode'][1176] = 'panda-end'
        self.errorCodes['pilotErrorCode'][1177] = 'Voms proxy not valid'
        self.errorStages['pilotErrorCode'][1177] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1178] = 'Get error: No input files are staged'
        self.errorStages['pilotErrorCode'][1178] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1179] = 'Get error: Failed to get LFC replicas'
        self.errorStages['pilotErrorCode'][1179] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1180] = 'Get error: Globus system error'
        self.errorStages['pilotErrorCode'][1180] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1181] = 'Put error: Globus system error'
        self.errorStages['pilotErrorCode'][1181] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1182] = 'Get error: Failed to get LFC replica'
        self.errorStages['pilotErrorCode'][1182] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1183] = 'LRC registration error: Guid-metadata entry already exists'
        self.errorStages['pilotErrorCode'][1183] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1184] = 'Put error: PoolFileCatalog could not be found in workdir'
        self.errorStages['pilotErrorCode'][1184] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1185] = 'Put error: Error running adler32 on the file in job workdir'
        self.errorStages['pilotErrorCode'][1185] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1186] = 'Software directory does not exist'
        self.errorStages['pilotErrorCode'][1186] = 'panda-start'
        self.errorCodes['pilotErrorCode'][1187] = 'Athena metadata is not available'
        self.errorStages['pilotErrorCode'][1187] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1188] = 'lcg-getturls failed'
        self.errorStages['pilotErrorCode'][1188] = 'panda-during'
        self.errorCodes['pilotErrorCode'][1189] = 'lcg-getturls was timed-out'
        self.errorStages['pilotErrorCode'][1189] = 'panda-during'
        self.errorCodes['pilotErrorCode'][1190] = 'LFN too long (exceeding limit of 150 characters)'
        self.errorStages['pilotErrorCode'][1190] = 'panda-during'
        self.errorCodes['pilotErrorCode'][1191] = 'Illegal zero file size'
        self.errorStages['pilotErrorCode'][1191] = 'ddm-end'
        self.errorCodes['pilotErrorCode'][1192] = 'DBRelease file has not been transferred yet'
        self.errorStages['pilotErrorCode'][1192] = 'ddm-start'
        self.errorCodes['pilotErrorCode'][1194] = 'File verification failed'
        self.errorStages['pilotErrorCode'][1194] = 'panda-during'
        self.errorCodes['pilotErrorCode'][1195] = 'Command timed out'
        self.errorStages['pilotErrorCode'][1195] = 'panda-during'
        self.errorCodes['pilotErrorCode'][1198] = 'Can not check the child process status from the heartbeat process'
        self.errorStages['pilotErrorCode'][1198] = 'panda-during'
        self.errorCodes['pilotErrorCode'][1199] = 'Could not create the directory'
        self.errorStages['pilotErrorCode'][1199] = 'panda-start'
        self.errorCodes['pilotErrorCode'][1200] = 'Job terminated by unknown kill signal'
        self.errorStages['pilotErrorCode'][1200] = 'panda-during'
        self.errorCodes['pilotErrorCode'][1201] = 'Job killed from the batch system: SIGTERM'
        self.errorStages['pilotErrorCode'][1201] = 'panda-during'
        self.errorCodes['pilotErrorCode'][1202] = 'Job killed from the batch system: SIGQUIT'
        self.errorStages['pilotErrorCode'][1202] = 'panda-during'
        self.errorCodes['pilotErrorCode'][1203] = 'Job killed from the batch system: SIGSEGV'
        self.errorStages['pilotErrorCode'][1203] = 'panda-during'
        self.errorCodes['pilotErrorCode'][1204] = 'Job killed from the batch system: SIGXCPU'
        self.errorStages['pilotErrorCode'][1204] = 'panda-during'
        self.errorCodes['pilotErrorCode'][1205] = 'Job killed by user'
        self.errorStages['pilotErrorCode'][1205] = 'user-during'
        self.errorCodes['pilotErrorCode'][1210] = 'No athena output'
        self.errorStages['pilotErrorCode'][1210] = 'athena-end'
        self.errorCodes['pilotErrorCode'][1211] = 'Missing installation'
        self.errorStages['pilotErrorCode'][1211] = 'panda-end'
        self.errorCodes['pilotErrorCode'][1212] = 'Athena ran out of memory'
        self.errorStages['pilotErrorCode'][1212] = 'athena-during'
        self.errorCodes['pilotErrorCode'][1220] = 'Job failed due to unknown reason (consult log file)'
        self.errorStages['pilotErrorCode'][1220] = 'athena-end'
        
        self.errorCodes['exeErrorCode'][99] = 'Transformation error code mismatch'
        self.errorStages['exeErrorCode'][99] = 'athena-end'
        self.errorCodes['exeErrorCode'][100] = 'Transformation not found in run directory'
        self.errorStages['exeErrorCode'][100] = 'ddm-start'
        
        for code in range ( 1000, 2000 ):
            if self.errorCodes['pilotErrorCode'].has_key(code) or self.errorStages['pilotErrorCode'].has_key(code):
               self.errorCodes['exeErrorCode'][code]  = self.errorCodes['pilotErrorCode'][code]
               self.errorStages['exeErrorCode'][code] = self.errorStages['pilotErrorCode'][code] 

    # errors at http://alxr.usatlas.bnl.gov/lxr/source/atlas/Tools/PyJobTransformsCore/share/atlas_error_categories.db?v=current
        self.errorCodes['exeErrorCode'][60000] = 'segmentation violation'
        self.errorStages['exeErrorCode'][60000] = 'athena-during'
        self.errorCodes['exeErrorCode'][60010] = 'segmentation fault'
        self.errorStages['exeErrorCode'][60010] = 'athena-during'
        self.errorCodes['exeErrorCode'][60100] = 'CBNT_Athena::execute() error'
        self.errorStages['exeErrorCode'][60100] = 'athena-during'
        self.errorCodes['exeErrorCode'][60101] = 'TRTDigitization::execute() error'
        self.errorStages['exeErrorCode'][60101] = 'athena-during'
        self.errorCodes['exeErrorCode'][60200] = 'egammaShowerShape: Cluster is neither in Barrel nor in Endcap cannot calculate ShowerShape'
        self.errorStages['exeErrorCode'][60200] = 'athena-during'
        self.errorCodes['exeErrorCode'][60201] = 'LArEMECEnergyCorrection::CalculateChargeCollection error'
        self.errorStages['exeErrorCode'][60201] = 'athena-during'
        self.errorCodes['exeErrorCode'][60600] = 'Transform Keyboard interrupt'
        self.errorStages['exeErrorCode'][60600] = 'athena-during'
        self.errorCodes['exeErrorCode'][60701] = 'CBNT_Audit could not allocate memory'
        self.errorStages['exeErrorCode'][60701] = 'athena-during'
        self.errorCodes['exeErrorCode'][61000] = 'ApplicationMgr Failed to load modules'
        self.errorStages['exeErrorCode'][61000] = 'athena-during'
        self.errorCodes['exeErrorCode'][61010] = 'DllClassManager Could not load module'
        self.errorStages['exeErrorCode'][61010] = 'athena-during'
        self.errorCodes['exeErrorCode'][61020] = 'DllClassManager Entry point failure in module'
        self.errorStages['exeErrorCode'][61020] = 'athena-during'
        self.errorCodes['exeErrorCode'][61100] = 'EventLoopMgr Unable to initialize Algorithm'
        self.errorStages['exeErrorCode'][61100] = 'athena-during'
        self.errorCodes['exeErrorCode'][61200] = 'ServiceManager Unable to initialize Service'
        self.errorStages['exeErrorCode'][61200] = 'athena-during'
        self.errorCodes['exeErrorCode'][62000] = 'ServiceManager Finalization of service AthenaSealSvc failed'
        self.errorStages['exeErrorCode'][62000] = 'athena-during'
        self.errorCodes['exeErrorCode'][62100] = 'pixelRoI service_i: can not locate service DetectorStore'
        self.errorStages['exeErrorCode'][62100] = 'athena-during'
        self.errorCodes['exeErrorCode'][62200] = 'pool::PersistencySvc::UserDatabase::connectForRead: PFN is not existing in the catalog'
        self.errorStages['exeErrorCode'][62200] = 'athena-during'
        self.errorCodes['exeErrorCode'][62300] = 'ServiceManager: unable to initialize Service: EventSelector'
        self.errorStages['exeErrorCode'][62300] = 'athena-during'
        self.errorCodes['exeErrorCode'][62400] = 'JobOptionsSvc error'
        self.errorStages['exeErrorCode'][62400] = 'athena-during'
        self.errorCodes['exeErrorCode'][62500] = 'PartPropSvc: could not open PDT file'
        self.errorStages['exeErrorCode'][62500] = 'athena-during'
        self.errorCodes['exeErrorCode'][62510] = 'PartPropSvc: unable to access any PDT file'
        self.errorStages['exeErrorCode'][62510] = 'athena-during'
        self.errorCodes['exeErrorCode'][62600] = 'AthenaCrash'
        self.errorStages['exeErrorCode'][62600] = 'athena-during'
        self.errorCodes['exeErrorCode'][62700] = 'DetectorStore: no valid proxy for default object'
        self.errorStages['exeErrorCode'][62700] = 'athena-during'
        self.errorCodes['exeErrorCode'][62800] = 'JobOptionsSvc: unable to set property'
        self.errorStages['exeErrorCode'][62800] = 'athena-during'
        self.errorCodes['exeErrorCode'][62900] = 'DllClassManager: system Error'
        self.errorStages['exeErrorCode'][62900] = 'athena-during'
        self.errorCodes['exeErrorCode'][62910] = 'ApplicationMgr: failure loading declared DLL\'s'
        self.errorStages['exeErrorCode'][62910] = 'athena-during'
        self.errorCodes['exeErrorCode'][63000] = 'Transform python errors'
        self.errorStages['exeErrorCode'][63000] = 'athena-during'
        self.errorCodes['exeErrorCode'][63010] = 'Transform python syntax error'
        self.errorStages['exeErrorCode'][63010] = 'athena-during'
        self.errorCodes['exeErrorCode'][63020] = 'Transform python import error'
        self.errorStages['exeErrorCode'][63020] = 'athena-during'
        self.errorCodes['exeErrorCode'][63100] = 'Transform argument errors'
        self.errorStages['exeErrorCode'][63100] = 'athena-during'
        self.errorCodes['exeErrorCode'][63110] = 'maxEvents argument: Too few events requested'
        self.errorStages['exeErrorCode'][63110] = 'user-during'
        self.errorCodes['exeErrorCode'][63111] = 'maxEvents argument: Too many events requested'
        self.errorStages['exeErrorCode'][63111] = 'user-during'
        self.errorCodes['exeErrorCode'][63200] = 'Transform definition errors'
        self.errorStages['exeErrorCode'][63200] = 'athena-during'
        self.errorCodes['exeErrorCode'][63300] = 'Transform environment errors'
        self.errorStages['exeErrorCode'][63300] = 'athena-during'
        self.errorCodes['exeErrorCode'][63400] = 'Transform unknown exceptions'
        self.errorStages['exeErrorCode'][63400] = 'athena-during'
        self.errorCodes['exeErrorCode'][63500] = 'Transform execution timeout'
        self.errorStages['exeErrorCode'][63500] = 'athena-during'
        self.errorCodes['exeErrorCode'][63600] = 'Transform execution retries exhausted'
        self.errorStages['exeErrorCode'][63600] = 'athena-during'
        self.errorCodes['exeErrorCode'][63900] = 'Transform file errors'
        self.errorStages['exeErrorCode'][63900] = 'athena-during'
        self.errorCodes['exeErrorCode'][64000] = 'Transform input file errors'
        self.errorStages['exeErrorCode'][64000] = 'athena-during'
        self.errorCodes['exeErrorCode'][64010] = 'Transform input file not found'
        self.errorStages['exeErrorCode'][64010] = 'athena-during'
        self.errorCodes['exeErrorCode'][64020] = 'Transform input file not readable'
        self.errorStages['exeErrorCode'][64020] = 'athena-during'
        self.errorCodes['exeErrorCode'][64030] = 'Transform input file empty'
        self.errorStages['exeErrorCode'][64030] = 'athena-during'
        self.errorCodes['exeErrorCode'][64031] = 'Transform input file contains too few events'
        self.errorStages['exeErrorCode'][64031] = 'athena-during'
        self.errorCodes['exeErrorCode'][64032] = 'Transform input file contains too many events'
        self.errorStages['exeErrorCode'][64032] = 'athena-during'
        self.errorCodes['exeErrorCode'][64033] = 'Transform input file: Event counting failed'
        self.errorStages['exeErrorCode'][64033] = 'athena-during'
        self.errorCodes['exeErrorCode'][64040] = 'Transform input file corrupted'
        self.errorStages['exeErrorCode'][64040] = 'athena-during'
        self.errorCodes['exeErrorCode'][64100] = 'Transform output file errors'
        self.errorStages['exeErrorCode'][64100] = 'athena-during'
        self.errorCodes['exeErrorCode'][64110] = 'Transform output file not found'
        self.errorStages['exeErrorCode'][64110] = 'athena-during'
        self.errorCodes['exeErrorCode'][64120] = 'Transform output file not readable'
        self.errorStages['exeErrorCode'][64120] = 'athena-during'
        self.errorCodes['exeErrorCode'][64130] = 'Transform output file empty'
        self.errorStages['exeErrorCode'][64130] = 'athena-during'
        self.errorCodes['exeErrorCode'][64131] = 'Transform output file contains too few events'
        self.errorStages['exeErrorCode'][64131] = 'athena-during'
        self.errorCodes['exeErrorCode'][64132] = 'Transform output file contains too many events'
        self.errorStages['exeErrorCode'][64132] = 'athena-during'
        self.errorCodes['exeErrorCode'][64133] = 'Transform output file: Event counting failed'
        self.errorStages['exeErrorCode'][64133] = 'athena-during'
        self.errorCodes['exeErrorCode'][64140] = 'Transform output file corrupted'
        self.errorStages['exeErrorCode'][64140] = 'athena-during'
        self.errorCodes['exeErrorCode'][64150] = 'Transform output file already exists'
        self.errorStages['exeErrorCode'][64150] = 'athena-during'
        self.errorCodes['exeErrorCode'][64200] = 'Error in transform configuration file'
        self.errorStages['exeErrorCode'][64200] = 'athena-during'
        self.errorCodes['exeErrorCode'][65000] = 'Problems with Database'
        self.errorStages['exeErrorCode'][65000] = 'athena-during'
        self.errorCodes['exeErrorCode'][65100] = 'Problems with DBRelease'
        self.errorStages['exeErrorCode'][65100] = 'athena-during'
        self.errorCodes['exeErrorCode'][65110] = 'DBRelease not setup'
        self.errorStages['exeErrorCode'][65110] = 'athena-during'
        self.errorCodes['exeErrorCode'][65120] = 'Wrong version of DBRelease setup'
        self.errorStages['exeErrorCode'][65120] = 'athena-during'
        self.errorCodes['exeErrorCode'][65130] = 'Problems with the DBRelease tarfile'
        self.errorStages['exeErrorCode'][65130] = 'athena-during'
        self.errorCodes['exeErrorCode'][65200] = 'Problems with geometry tag'
        self.errorStages['exeErrorCode'][65200] = 'athena-during'
        self.errorCodes['exeErrorCode'][65210] = 'Mismatch between Geometry Tag in transform argument geometryVersion and in input file'
        self.errorStages['exeErrorCode'][65210] = 'athena-during'
        self.errorCodes['exeErrorCode'][66000] = 'Bad file descriptor'
        self.errorStages['exeErrorCode'][66000] = 'athena-during'
        self.errorCodes['exeErrorCode'][69999] = 'Unknown Transform error'
        self.errorStages['exeErrorCode'][69999] = 'athena-during'
        self.errorCodes['exeErrorCode'][10000] = 'Athena/Transformation error'
        self.errorStages['exeErrorCode'][10000] = 'athena-during'
        self.errorCodes['exeErrorCode'][10100] = 'At/Tr connection error'
        self.errorStages['exeErrorCode'][10100] = 'athena-during'
        self.errorCodes['exeErrorCode'][10102] = 'Nova DB problems'
        self.errorStages['exeErrorCode'][10102] = 'athena-during'
        self.errorCodes['exeErrorCode'][10103] = 'Calibration DB problems'
        self.errorStages['exeErrorCode'][10103] = 'athena-during'
        self.errorCodes['exeErrorCode'][10104] = 'Oracle error ORA-03113'
        self.errorStages['exeErrorCode'][10104] = 'panda-during'
        self.errorCodes['exeErrorCode'][10110] = 'Conditions database problems'
        self.errorStages['exeErrorCode'][10110] = 'athena-during'
        self.errorCodes['exeErrorCode'][10120] = 'nfs lock problems with sqlite database'
        self.errorStages['exeErrorCode'][10120] = 'athena-during'
        self.errorCodes['exeErrorCode'][10130] = 'Lost connection to MySQL server'
        self.errorStages['exeErrorCode'][10130] = 'panda-during'
        self.errorCodes['exeErrorCode'][10140] = 'Oracle error ORA-02391: exceeded simultaneous SESSIONS_PER_USER limit'
        self.errorStages['exeErrorCode'][10140] = 'panda-during'
        self.errorCodes['exeErrorCode'][10200] = 'Athena crashes'
        self.errorStages['exeErrorCode'][10200] = 'athena-during'
        self.errorCodes['exeErrorCode'][10210] = 'Athena init failed'
        self.errorStages['exeErrorCode'][10210] = 'athena-during'
        self.errorCodes['exeErrorCode'][10212] = 'Missing PFN in PoolFileCatalog'
        self.errorStages['exeErrorCode'][10212] = 'athena-during'
        self.errorCodes['exeErrorCode'][10213] = 'AuditorSvc init failed'
        self.errorStages['exeErrorCode'][10213] = 'athena-during'
        self.errorCodes['exeErrorCode'][10214] = 'Pythia DLL not loaded'
        self.errorStages['exeErrorCode'][10214] = 'athena-during'
        self.errorCodes['exeErrorCode'][10220] = 'Input file corrupted (Wrong input)'
        self.errorStages['exeErrorCode'][10220] = 'athena-during'
        self.errorCodes['exeErrorCode'][10300] = 'ApplicationMgr Failed to load modules'
        self.errorStages['exeErrorCode'][10300] = 'athena-during'
        self.errorCodes['exeErrorCode'][10310] = 'DllClassManager Could not load module'
        self.errorStages['exeErrorCode'][10310] = 'athena-during'
        self.errorCodes['exeErrorCode'][10400] = 'Problems loading dynamic libraries'
        self.errorStages['exeErrorCode'][10400] = 'athena-during'
        self.errorCodes['exeErrorCode'][10410] = 'Problem loading shared library'
        self.errorStages['exeErrorCode'][10410] = 'athena-during'
        self.errorCodes['exeErrorCode'][10420] = 'ApplicationMgr: failure loading declared DLL\'s'
        self.errorStages['exeErrorCode'][10420] = 'athena-during'
        self.errorCodes['exeErrorCode'][10430] = 'Problems loading shared libraries in LD_PRELOAD '
        self.errorStages['exeErrorCode'][10430] = 'athena-during'
        self.errorCodes['exeErrorCode'][10500] = 'JobOptions errors'
        self.errorStages['exeErrorCode'][10500] = 'user-during'
        self.errorCodes['exeErrorCode'][10510] = 'JobOptions file not found'
        self.errorStages['exeErrorCode'][10510] = 'user-during'
        self.errorCodes['exeErrorCode'][10520] = 'Error in jobOptions'
        self.errorStages['exeErrorCode'][10520] = 'user-during'
        self.errorCodes['exeErrorCode'][10600] = 'Athena Keyboard interrupt'
        self.errorStages['exeErrorCode'][10600] = 'user-during'
        self.errorCodes['exeErrorCode'][10700] = 'Athena StoreGateSvc errors'
        self.errorStages['exeErrorCode'][10700] = 'athena-during'
        self.errorCodes['exeErrorCode'][10710] = 'StoreGateSvc retrieve errors'
        self.errorStages['exeErrorCode'][10710] = 'athena-during'
        self.errorCodes['exeErrorCode'][10711] = 'StoreGateSvc retrieve(default): No valid proxy for object'
        self.errorStages['exeErrorCode'][10711] = 'athena-during'
        self.errorCodes['exeErrorCode'][10712] = 'StoreGateSvc retrieve(non-const): No valid proxy for object'
        self.errorStages['exeErrorCode'][10712] = 'athena-during'
        self.errorCodes['exeErrorCode'][10713] = 'StoreGateSvc retrieve(const): No valid proxy for object'
        self.errorStages['exeErrorCode'][10713] = 'athena-during'
        self.errorCodes['exeErrorCode'][10720] = 'StoreGateSvc record: object not added to store'
        self.errorStages['exeErrorCode'][10720] = 'athena-during'
        self.errorCodes['exeErrorCode'][10800] = 'Athena DetectorStore errors'
        self.errorStages['exeErrorCode'][10800] = 'athena-during'
        self.errorCodes['exeErrorCode'][10810] = 'DetectorStore retrieve errors'
        self.errorStages['exeErrorCode'][10810] = 'athena-during'
        self.errorCodes['exeErrorCode'][10811] = 'DetectorStore retrieve(default): No valid proxy for object'
        self.errorStages['exeErrorCode'][10811] = 'athena-during'
        self.errorCodes['exeErrorCode'][10812] = 'DetectorStore retrieve(non-const): No valid proxy for object'
        self.errorStages['exeErrorCode'][10812] = 'athena-during'
        self.errorCodes['exeErrorCode'][10813] = 'DetectorStore retrieve(const): No valid proxy for object'
        self.errorStages['exeErrorCode'][10813] = 'athena-during'
        self.errorCodes['exeErrorCode'][10820] = 'DetectorStore record: object not added to store'
        self.errorStages['exeErrorCode'][10820] = 'athena-during'
        self.errorCodes['exeErrorCode'][10900] = 'Problems with software installation'
        self.errorStages['exeErrorCode'][10900] = 'athena-during'
        self.errorCodes['exeErrorCode'][10910] = 'Missing system libraries'
        self.errorStages['exeErrorCode'][10910] = 'athena-during'
        self.errorCodes['exeErrorCode'][10920] = 'Missing libraries'
        self.errorStages['exeErrorCode'][10920] = 'athena-during'
        self.errorCodes['exeErrorCode'][11000] = 'Athena non-zero exit'
        self.errorStages['exeErrorCode'][11000] = 'athena-during'
        self.errorCodes['exeErrorCode'][13400] = 'Athena unknown exception'
        self.errorStages['exeErrorCode'][13400] = 'athena-during'
        self.errorCodes['exeErrorCode'][13410] = 'Athena python exception'
        self.errorStages['exeErrorCode'][13410] = 'athena-during'
        self.errorCodes['exeErrorCode'][13420] = 'Athena C++ exception'
        self.errorStages['exeErrorCode'][13420] = 'athena-during'
        self.errorCodes['exeErrorCode'][14100] = 'Athena output file errors'
        self.errorStages['exeErrorCode'][14100] = 'athena-during'
        self.errorCodes['exeErrorCode'][14110] = 'Athena pool.root file too large (root opened second file)'
        self.errorStages['exeErrorCode'][14110] = 'athena-during'
        self.errorCodes['exeErrorCode'][15010] = 'Geant4 got stuck in event'
        self.errorStages['exeErrorCode'][15010] = 'athena-during'
        self.errorCodes['exeErrorCode'][15000] = 'Problems with ElementLink'
        self.errorStages['exeErrorCode'][15000] = 'athena-during'
    
        self.errorCodes['transExitCode'] = {}
        self.errorStages['transExitCode'] = {}
        self.errorCodes['transExitCode'][1] = 'Unspecified error, consult log file'
        self.errorStages['transExitCode'][1] = 'athena-during'
        self.errorCodes['transExitCode'][2] = 'Athena core dump'
        self.errorStages['transExitCode'][2] = 'athena-during'
        self.errorCodes['transExitCode'][6] = 'TRF_SEGVIO - Segmentation violation'
        self.errorStages['transExitCode'][6] = 'athena-during'
        self.errorCodes['transExitCode'][10] = 'ATH_FAILURE - Athena non-zero exit'
        self.errorStages['transExitCode'][10] = 'athena-during'
        self.errorCodes['transExitCode'][26] = 'TRF_ATHENACRASH - Athena crash'
        self.errorStages['transExitCode'][26] = 'athena-during'
        self.errorCodes['transExitCode'][30] = 'TRF_PYT - transformation python error'
        self.errorStages['transExitCode'][30] = 'athena-during'
        self.errorCodes['transExitCode'][31] = 'TRF_ARG - transformation argument error'
        self.errorStages['transExitCode'][31] = 'athena-during'
        self.errorCodes['transExitCode'][32] = 'TRF_DEF - transformation definition error'
        self.errorStages['transExitCode'][32] = 'athena-during'
        self.errorCodes['transExitCode'][33] = 'TRF_ENV - transformation environment error'
        self.errorStages['transExitCode'][33] = 'athena-during'
        self.errorCodes['transExitCode'][34] = 'TRF_EXC - transformation exception'
        self.errorStages['transExitCode'][34] = 'athena-during'
        self.errorCodes['transExitCode'][40] = 'Athena crash - consult log file'
        self.errorStages['transExitCode'][40] = 'athena-during'
        self.errorCodes['transExitCode'][41] = 'TRF_OUTFILE - output file error'
        self.errorStages['transExitCode'][41] = 'athena-during'
        self.errorCodes['transExitCode'][42] = 'TRF_CONFIG - transform config file error'
        self.errorStages['transExitCode'][42] = 'athena-during'
        self.errorCodes['transExitCode'][50] = 'TRF_DB - problems with database'
        self.errorStages['transExitCode'][50] = 'athena-during'
        self.errorCodes['transExitCode'][51] = 'TRF_DBREL_TARFILE - Problems with the DBRelease tarfile'
        self.errorStages['transExitCode'][51] = 'athena-during'
        self.errorCodes['transExitCode'][60] = 'TRF_GBB_TIME - GriBB - output limit exceeded (time, memory, CPU)'
        self.errorStages['transExitCode'][60] = 'athena-during'
        self.errorCodes['transExitCode'][79] = 'Copying input file failed'
        self.errorStages['transExitCode'][79] = 'ddm-start'
        self.errorCodes['transExitCode'][80] = 'file in trf definition not found, using the expandable syntax'
        self.errorStages['transExitCode'][80] = 'athena-during'
        self.errorCodes['transExitCode'][81] = 'file in trf definition not found, using the expandable syntax -- pileup case'
        self.errorStages['transExitCode'][81] = 'athena-during'
        self.errorCodes['transExitCode'][98] = 'Oracle error - session limit reached'
        self.errorStages['transExitCode'][98] = 'panda-during'
        self.errorCodes['transExitCode'][99] = 'TRF_UNKNOWN - unknown transformation error'
        self.errorStages['transExitCode'][99] = 'athena-during'
        self.errorCodes['transExitCode'][102] = 'One of the output files did not get produced by the job'
        self.errorStages['transExitCode'][102] = 'athena-end'
        self.errorCodes['transExitCode'][104] = 'Copying the output file to local SE failed (md5sum or size mismatch, or LFNnonunique)'
        self.errorStages['transExitCode'][104] = 'ddm-end'
        self.errorCodes['transExitCode'][126] = 'Transformation not executable - consult log file'
        self.errorStages['transExitCode'][126] = 'athena-start'
        self.errorCodes['transExitCode'][127] = 'Transformation not installed in CE'
        self.errorStages['transExitCode'][127] = 'panda-start'
        self.errorCodes['transExitCode'][134] = 'Athena core dump or timeout, or conddb DB connect exception'
        self.errorStages['transExitCode'][134] = 'athena-during'
        self.errorCodes['transExitCode'][141] = "No input file available - check availability of input dataset at site"
        self.errorStages['transExitCode'][141] = 'ddm-start'
        self.errorCodes['transExitCode'][200] = 'Log file not transferred to destination'
        self.errorStages['transExitCode'][200] = 'ddm-end'
        self.errorCodes['transExitCode'][220] = 'Proot: An exception occurred in the user analysis code'
        self.errorStages['transExitCode'][220] = 'athena-during'
        self.errorCodes['transExitCode'][221] = 'Proot: Framework decided to abort the job due to an internal problem'
        self.errorStages['transExitCode'][221] = 'athena-during'
        self.errorCodes['transExitCode'][222] = 'Proot: Job completed without reading all input files'
        self.errorStages['transExitCode'][222] = 'athena-during'
        self.errorCodes['transExitCode'][223] = 'Proot: Input files cannot be opened'
        self.errorStages['transExitCode'][223] = 'athena-during'
    
        for code in ( 1008, 1098, 1112, 1116, 1117, 1118, 1119, 1163, 1177, 1178 ):
            self.errorCodes['transExitCode'][code] = self.errorCodes['pilotErrorCode'][code]
            self.errorStages['transExitCode'][code] = self.errorStages['pilotErrorCode'][code]

        self.errorCodes['transExitCode'][1198] = 'Can\'t check the child process status from the heartbeat process'
        self.errorStages['transExitCode'][1198] = 'athena-during'
    
        self.errorCodes['transExitCode'][2100] = "MyProxyError 2100: server name not specified"
        self.errorStages['transExitCode'][2100] = 'panda-start'
        self.errorCodes['transExitCode'][2101] = "MyProxyError 2101: voms attributes not specified"
        self.errorStages['transExitCode'][2101] = 'panda-start'
        self.errorCodes['transExitCode'][2102] = "MyProxyError 2102: user DN not specified"
        self.errorStages['transExitCode'][2102] = 'panda-start'
        self.errorCodes['transExitCode'][2103] = "MyProxyError 2103: pilot owner DN not specified"
        self.errorStages['transExitCode'][2103] = 'panda-start'
        self.errorCodes['transExitCode'][2104] = "MyProxyError 2104: invalid path for the delegated proxy"
        self.errorStages['transExitCode'][2104] = 'panda-start'
        self.errorCodes['transExitCode'][2105] = "MyProxyError 2105: invalid pilot proxy path"
        self.errorStages['transExitCode'][2105] = 'panda-start'
        self.errorCodes['transExitCode'][2106] = "MyProxyError 2106: no path to delegated proxy specified"
        self.errorStages['transExitCode'][2106] = 'panda-start'
        self.errorCodes['transExitCode'][2200] = "MyProxyError 2200: myproxy-init not available in PATH"
        self.errorStages['transExitCode'][2200] = 'panda-start'
        self.errorCodes['transExitCode'][2201] = "MyProxyError 2201: myproxy-logon not available in PATH"
        self.errorStages['transExitCode'][2201] = 'panda-start'
        self.errorCodes['transExitCode'][2202] = "MyProxyError 2202: myproxy-init version not valid"
        self.errorStages['transExitCode'][2202] = 'panda-start'
        self.errorCodes['transExitCode'][2203] = "MyProxyError 2203: myproxy-logon version not valid"
        self.errorStages['transExitCode'][2203] = 'panda-start'
        self.errorCodes['transExitCode'][2300] = "MyProxyError 2300: proxy delegation failed"
        self.errorStages['transExitCode'][2300] = 'panda-start'
        self.errorCodes['transExitCode'][2301] = "MyProxyError 2301: proxy retrieval failed"
        self.errorStages['transExitCode'][2301] = 'panda-start'
        self.errorCodes['transExitCode'][2400] = "MyProxyError 2400: security violation. Logname and DN do not match"
        self.errorStages['transExitCode'][2400] = 'panda-start'
        self.errorCodes['transExitCode'][2500] = "MyProxyError 2500: there is no a valid proxy"
        self.errorStages['transExitCode'][2500] = 'panda-start'
        self.errorCodes['transExitCode'][2501] = "MyProxyError 2501: voms-proxy-info not available in PATH"
        self.errorStages['transExitCode'][2501] = 'panda-start'
    
        self.errorCodes['transExitCode'][3000] = 'curl failed to download pilot wrapper'
        self.errorStages['transExitCode'][3000] = 'panda-start'
        self.errorCodes['transExitCode'][3001] = 'Failed to download pilot code'
        self.errorStages['transExitCode'][3001] = 'panda-start'
    
        # dq2_cr error codes
        self.errorCodes['transExitCode'][10020] = 'dq2_cr environment variables not properly defined'
        self.errorStages['transExitCode'][10020] = 'ddm-end'
        self.errorCodes['transExitCode'][10030] = 'dq2_cr getVUID error'
        self.errorStages['transExitCode'][10030] = 'ddm-end'
        self.errorCodes['transExitCode'][10040] = 'dq2_cr queryFilesInDataset error'
        self.errorStages['transExitCode'][10040] = 'ddm-end'
        self.errorCodes['transExitCode'][10050] = 'dq2_cr getLocation error'
        self.errorStages['transExitCode'][10050] = 'ddm-end'
        self.errorCodes['transExitCode'][10060] = 'dq2_cr requested protocol is not supported'
        self.errorStages['transExitCode'][10060] = 'ddm-end'
        self.errorCodes['transExitCode'][10070] = 'dq2_cr EC_MAIN error, check logfile'
        self.errorStages['transExitCode'][10070] = 'ddm-end'
        self.errorCodes['transExitCode'][10080] = 'dq2_cr PFNfromLFC error'
        self.errorStages['transExitCode'][10080] = 'ddm-end'
        self.errorCodes['transExitCode'][10090] = 'dq2_cr file size check failed'
        self.errorStages['transExitCode'][10090] = 'ddm-end'
        self.errorCodes['transExitCode'][10100] = 'dq2_cr could not create LFC directory'
        self.errorStages['transExitCode'][10100] = 'ddm-end'
        self.errorCodes['transExitCode'][10110] = 'dq2_cr LS error'
        self.errorStages['transExitCode'][10110] = 'ddm-end'
        self.errorCodes['transExitCode'][10120] = 'dq2_cr could not get dataset state from DQ2 server'
        self.errorStages['transExitCode'][10120] = 'ddm-end'
        self.errorCodes['transExitCode'][10130] = 'dq2_cr could not load ToA'
        self.errorStages['transExitCode'][10130] = 'ddm-end'
        self.errorCodes['transExitCode'][10140] = 'dq2_cr could not parse XML'
        self.errorStages['transExitCode'][10140] = 'ddm-end'
        self.errorCodes['transExitCode'][10150] = 'dq2_cr FileNotFound error'
        self.errorStages['transExitCode'][10150] = 'ddm-end'
   
        # ---------------------------------------------------------------------- 
        #               D A Y A B A Y        E R R O R S
        # ---------------------------------------------------------------------- 

        self.errorCodes['transExitCode'][1000001] = 'ERROR message'
        self.errorStages['transExitCode'][0010001] = 'panda-start'
        self.errorCodes['transExitCode'][1000002] = 'FATAL message'
        self.errorStages['transExitCode'][1000002] = 'panda-start'
        self.errorCodes['transExitCode'][1000003] = 'segmentation violation message'
        self.errorStages['transExitCode'][1000003] = 'panda-start'
        self.errorCodes['transExitCode'][1000004] = 'IOError message'
        self.errorStages['transExitCode'][1000004] = 'panda-start'
        self.errorCodes['transExitCode'][1000005] = 'ValueError message'
        self.errorStages['transExitCode'][1000005] = 'panda-start'
 
    def getErrorCodes(self):        
        return self.errorFields, self.errorCodes, self.errorStages
